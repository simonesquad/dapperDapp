"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Core = void 0;
var Modules_1 = require("./Modules/Modules");
var LoggerController_1 = require("./controllers/LoggerController");
var Config_1 = require("./Config/Config");
var CoreConfigSetup_1 = require("./Config/CoreConfigSetup");
var version_1 = require("./version");
var Error_1 = require("./Error");
/**
 * Core is used in all Moralis applications
 * This class is **required** to be implemented in every app
 *
 * This class is responsible for:
 * - registering, removing and accessing modules
 * - accessing and changing the config
 */
var Core = /** @class */ (function () {
    function Core(modules, config, logger) {
        var _this = this;
        this.modules = modules;
        this.config = config;
        this.logger = logger;
        this.name = Core.moduleName;
        this._isStarted = false;
        /**
         * Register all specified modules and configurations
         * @params array of all modules (any module that is extended from BaseModule) that you want to include
         */
        this.registerModules = function (modules) {
            modules.forEach(_this.registerModule);
        };
        /**
         * Register a new module
         */
        this.registerModule = function (module) {
            if ('create' in module) {
                module = module.create(_this);
            }
            _this.modules.register(module);
            _this.logger.verbose('Module registered', { module: module.name });
        };
        this.getModule = function (name) {
            return _this.modules.get(name);
        };
        /**
         * Start all modules, this function should be called before any interaction with a module,
         * as it is responsible for initialising the modules.
         *
         * This will call `start()` on every registered module
         */
        this.start = function (providedConfig) {
            if (_this._isStarted) {
                throw new Error_1.MoralisError({
                    message: 'Modules are started already. This method should be called only one time.',
                    code: Error_1.CoreErrorCode.ALREADY_INITIALIZED,
                });
            }
            _this._isStarted = true;
            if (providedConfig) {
                _this.config.merge(providedConfig);
            }
            _this.logger.verbose('Starting all registered modules', {
                moduleNames: _this.modules.listNames(),
            });
            _this.logger.verbose('Finished starting all registered modules', {
                moduleNames: _this.modules.listNames(),
            });
        };
    }
    Core.create = function () {
        var modules = new Modules_1.Modules();
        var config = new Config_1.Config();
        var logger = new LoggerController_1.LoggerController(Core.moduleName, config);
        var core = new Core(modules, config, logger);
        CoreConfigSetup_1.CoreConfigSetup.register(config);
        return core;
    };
    Object.defineProperty(Core.prototype, "isStarted", {
        get: function () {
            return this._isStarted;
        },
        enumerable: false,
        configurable: true
    });
    Core.moduleName = 'core';
    Core.libVersion = version_1.LIB_VERSION;
    return Core;
}());
exports.Core = Core;
//# sourceMappingURL=Core.js.map