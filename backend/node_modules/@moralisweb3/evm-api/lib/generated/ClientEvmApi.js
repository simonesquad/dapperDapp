"use strict";
// CAUTION: This file is automatically generated. Do not edit it manually!
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientEvmApi = void 0;
var common_evm_utils_1 = require("@moralisweb3/common-evm-utils");
var api_utils_1 = require("@moralisweb3/api-utils");
var common_core_1 = require("@moralisweb3/common-core");
var ClientEvmApi = /** @class */ (function () {
    function ClientEvmApi() {
        var _this = this;
        this.type = common_core_1.ModuleType.API;
        this.utils = {
            endpointWeights: function () {
                return new api_utils_1.OperationResolver(common_evm_utils_1.endpointWeightsOperation, _this.baseUrl, _this.core).fetch({});
            },
            runContractFunction: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.runContractFunctionOperation, _this.baseUrl, _this.core).fetch(request);
            },
            web3ApiVersion: function () {
                return new api_utils_1.OperationResolver(common_evm_utils_1.web3ApiVersionOperation, _this.baseUrl, _this.core).fetch({});
            },
        };
        this.block = {
            getBlock: function (request) {
                return new api_utils_1.NullableOperationResolver(common_evm_utils_1.getBlockOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getDateToBlock: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getDateToBlockOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        this.events = {
            getContractEvents: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getContractEventsOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getContractLogs: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getContractLogsOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        this.nft = {
            getContractNFTs: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getContractNFTsOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getMultipleNFTs: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getMultipleNFTsOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTContractMetadata: function (request) {
                return new api_utils_1.NullableOperationResolver(common_evm_utils_1.getNFTContractMetadataOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTContractTransfers: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getNFTContractTransfersOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTLowestPrice: function (request) {
                return new api_utils_1.NullableOperationResolver(common_evm_utils_1.getNFTLowestPriceOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTMetadata: function (request) {
                return new api_utils_1.NullableOperationResolver(common_evm_utils_1.getNFTMetadataOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTOwners: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getNFTOwnersOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTTokenIdOwners: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getNFTTokenIdOwnersOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTTrades: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getNFTTradesOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTTransfersByBlock: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getNFTTransfersByBlockOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTTransfersFromToBlock: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getNFTTransfersFromToBlockOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getNFTTransfers: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getWalletNFTCollections: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getWalletNFTCollectionsOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getWalletNFTs: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getWalletNFTsOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getWalletNFTTransfers: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getWalletNFTTransfersOperation, _this.baseUrl, _this.core).fetch(request);
            },
            reSyncMetadata: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.reSyncMetadataOperation, _this.baseUrl, _this.core).fetch(request);
            },
            searchNFTs: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.searchNFTsOperation, _this.baseUrl, _this.core).fetch(request);
            },
            syncNFTContract: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.syncNFTContractOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        this.balance = {
            getNativeBalance: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getNativeBalanceOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        this.defi = {
            getPairAddress: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getPairAddressOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getPairReserves: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getPairReservesOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        this.token = {
            getTokenAllowance: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getTokenAllowanceOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getTokenMetadataBySymbol: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getTokenMetadataBySymbolOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getTokenMetadata: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getTokenMetadataOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getTokenPrice: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getTokenPriceOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getTokenTransfers: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getWalletTokenBalances: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.getWalletTokenBalancesOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getWalletTokenTransfers: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getWalletTokenTransfersOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        this.transaction = {
            getTransaction: function (request) {
                return new api_utils_1.NullableOperationResolver(common_evm_utils_1.getTransactionOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getWalletTransactions: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getWalletTransactionsOperation, _this.baseUrl, _this.core).fetch(request);
            },
            getWalletTransactionsVerbose: function (request) {
                return new api_utils_1.PaginatedOperationResolver(common_evm_utils_1.getWalletTransactionsVerboseOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        this.resolve = {
            resolveAddress: function (request) {
                return new api_utils_1.NullableOperationResolver(common_evm_utils_1.resolveAddressOperation, _this.baseUrl, _this.core).fetch(request);
            },
            resolveDomain: function (request) {
                return new api_utils_1.NullableOperationResolver(common_evm_utils_1.resolveDomainOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
        this.ipfs = {
            uploadFolder: function (request) {
                return new api_utils_1.OperationResolver(common_evm_utils_1.uploadFolderOperation, _this.baseUrl, _this.core).fetch(request);
            },
        };
    }
    return ClientEvmApi;
}());
exports.ClientEvmApi = ClientEvmApi;
//# sourceMappingURL=ClientEvmApi.js.map